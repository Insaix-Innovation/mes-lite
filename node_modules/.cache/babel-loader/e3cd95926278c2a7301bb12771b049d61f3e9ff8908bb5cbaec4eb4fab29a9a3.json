{"ast":null,"code":"import { trackElementSize } from \"./chunk-FW3ST7OM.mjs\";\n\n// src/track-sizes.ts\nfunction trackElementsSize(options) {\n  const {\n    getNodes,\n    observeMutation = true,\n    callback\n  } = options;\n  const cleanups = [];\n  let firstNode = null;\n  function trigger() {\n    const elements = getNodes();\n    firstNode = elements[0];\n    const fns = elements.map((element, index) => trackElementSize(element, size => {\n      callback(size, index);\n    }));\n    cleanups.push(...fns);\n  }\n  trigger();\n  if (observeMutation) {\n    const fn = trackMutation(firstNode, trigger);\n    cleanups.push(fn);\n  }\n  return () => {\n    cleanups.forEach(cleanup => {\n      cleanup === null || cleanup === void 0 || cleanup();\n    });\n  };\n}\nfunction trackMutation(el, cb) {\n  var _el$ownerDocument$def, _el$ownerDocument;\n  if (!el || !el.parentElement) return;\n  const win = (_el$ownerDocument$def = (_el$ownerDocument = el.ownerDocument) === null || _el$ownerDocument === void 0 ? void 0 : _el$ownerDocument.defaultView) !== null && _el$ownerDocument$def !== void 0 ? _el$ownerDocument$def : window;\n  const observer = new win.MutationObserver(() => {\n    cb();\n  });\n  observer.observe(el.parentElement, {\n    childList: true\n  });\n  return () => {\n    observer.disconnect();\n  };\n}\nexport { trackElementsSize };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}