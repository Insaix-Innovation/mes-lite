{"ast":null,"code":"// src/index.ts\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\nfunction getErrorMessage(hook, provider) {\n  return \"\".concat(hook, \" returned `undefined`. Seems you forgot to wrap component within \").concat(provider);\n}\nfunction createContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage\n  } = options;\n  const Context = createReactContext(void 0);\n  Context.displayName = name;\n  function useContext() {\n    var _a;\n    const context = useReactContext(Context);\n    if (!context && strict) {\n      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}\nexport { createContext };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}