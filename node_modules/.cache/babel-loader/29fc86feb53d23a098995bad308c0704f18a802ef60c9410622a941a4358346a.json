{"ast":null,"code":"import { findToast, getToastPosition } from \"./chunk-5XWPESX6.mjs\";\nimport { getToastPlacement } from \"./chunk-F6QD4NSP.mjs\";\n\n// src/toast.tsx\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { runIfFn } from \"@chakra-ui/shared-utils\";\n\n// src/toast.store.ts\nvar initialState = {\n  top: [],\n  \"top-left\": [],\n  \"top-right\": [],\n  \"bottom-left\": [],\n  bottom: [],\n  \"bottom-right\": []\n};\nvar toastStore = createStore(initialState);\nfunction createStore(initialState2) {\n  let state = initialState2;\n  const listeners = /* @__PURE__ */new Set();\n  const setState = setStateFn => {\n    state = setStateFn(state);\n    listeners.forEach(l => l());\n  };\n  return {\n    getState: () => state,\n    subscribe: listener => {\n      listeners.add(listener);\n      return () => {\n        setState(() => initialState2);\n        listeners.delete(listener);\n      };\n    },\n    removeToast: (id, position) => {\n      setState(prevState => ({\n        ...prevState,\n        [position]: prevState[position].filter(toast => toast.id != id)\n      }));\n    },\n    notify: (message, options) => {\n      const toast = createToast(message, options);\n      const {\n        position,\n        id\n      } = toast;\n      setState(prevToasts => {\n        var _a, _b;\n        const isTop = position.includes(\"top\");\n        const toasts = isTop ? [toast, ...((_a = prevToasts[position]) != null ? _a : [])] : [...((_b = prevToasts[position]) != null ? _b : []), toast];\n        return {\n          ...prevToasts,\n          [position]: toasts\n        };\n      });\n      return id;\n    },\n    update: (id, options) => {\n      if (!id) return;\n      setState(prevState => {\n        const nextState = {\n          ...prevState\n        };\n        const {\n          position,\n          index\n        } = findToast(nextState, id);\n        if (position && index !== -1) {\n          nextState[position][index] = {\n            ...nextState[position][index],\n            ...options,\n            message: createRenderToast(options)\n          };\n        }\n        return nextState;\n      });\n    },\n    closeAll: function () {\n      let {\n        positions\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      setState(prev => {\n        const allPositions = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        const positionsToClose = positions != null ? positions : allPositions;\n        return positionsToClose.reduce((acc, position) => {\n          acc[position] = prev[position].map(toast => ({\n            ...toast,\n            requestClose: true\n          }));\n          return acc;\n        }, {\n          ...prev\n        });\n      });\n    },\n    close: id => {\n      setState(prevState => {\n        const position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return {\n          ...prevState,\n          [position]: prevState[position].map(toast => {\n            if (toast.id == id) {\n              return {\n                ...toast,\n                requestClose: true\n              };\n            }\n            return toast;\n          })\n        };\n      });\n    },\n    isActive: id => Boolean(findToast(toastStore.getState(), id).position)\n  };\n}\nvar counter = 0;\nfunction createToast(message) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b;\n  counter += 1;\n  const id = (_a = options.id) != null ? _a : counter;\n  const position = (_b = options.position) != null ? _b : \"bottom\";\n  return {\n    id,\n    message,\n    position,\n    duration: options.duration,\n    onCloseComplete: options.onCloseComplete,\n    onRequestRemove: () => toastStore.removeToast(String(id), position),\n    status: options.status,\n    requestClose: false,\n    containerStyle: options.containerStyle\n  };\n}\n\n// src/toast.tsx\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Toast = props => {\n  const {\n    status,\n    variant = \"solid\",\n    id,\n    title,\n    isClosable,\n    onClose,\n    description,\n    icon\n  } = props;\n  const ids = id ? {\n    root: \"toast-\".concat(id),\n    title: \"toast-\".concat(id, \"-title\"),\n    description: \"toast-\".concat(id, \"-description\")\n  } : void 0;\n  return /* @__PURE__ */jsxs(Alert, {\n    addRole: false,\n    status,\n    variant,\n    id: ids == null ? void 0 : ids.root,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\",\n    children: [/* @__PURE__ */jsx(AlertIcon, {\n      children: icon\n    }), /* @__PURE__ */jsxs(chakra.div, {\n      flex: \"1\",\n      maxWidth: \"100%\",\n      children: [title && /* @__PURE__ */jsx(AlertTitle, {\n        id: ids == null ? void 0 : ids.title,\n        children: title\n      }), description && /* @__PURE__ */jsx(AlertDescription, {\n        id: ids == null ? void 0 : ids.description,\n        display: \"block\",\n        children: description\n      })]\n    }), isClosable && /* @__PURE__ */jsx(CloseButton, {\n      size: \"sm\",\n      onClick: onClose,\n      position: \"absolute\",\n      insetEnd: 1,\n      top: 1\n    })]\n  });\n};\nfunction createRenderToast() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    render,\n    toastComponent: ToastComponent = Toast\n  } = options;\n  const renderToast = props => {\n    if (typeof render === \"function\") {\n      return render({\n        ...props,\n        ...options\n      });\n    }\n    return /* @__PURE__ */jsx(ToastComponent, {\n      ...props,\n      ...options\n    });\n  };\n  return renderToast;\n}\nfunction createToastFn(dir, defaultOptions) {\n  const normalizeToastOptions = options => {\n    var _a;\n    return {\n      ...defaultOptions,\n      ...options,\n      position: getToastPlacement((_a = options == null ? void 0 : options.position) != null ? _a : defaultOptions == null ? void 0 : defaultOptions.position, dir)\n    };\n  };\n  const toast = options => {\n    const normalizedToastOptions = normalizeToastOptions(options);\n    const Message = createRenderToast(normalizedToastOptions);\n    return toastStore.notify(Message, normalizedToastOptions);\n  };\n  toast.update = (id, options) => {\n    toastStore.update(id, normalizeToastOptions(options));\n  };\n  toast.promise = (promise, options) => {\n    const id = toast({\n      ...options.loading,\n      status: \"loading\",\n      duration: null\n    });\n    promise.then(data => toast.update(id, {\n      status: \"success\",\n      duration: 5e3,\n      ...runIfFn(options.success, data)\n    })).catch(error => toast.update(id, {\n      status: \"error\",\n      duration: 5e3,\n      ...runIfFn(options.error, error)\n    }));\n  };\n  toast.closeAll = toastStore.closeAll;\n  toast.close = toastStore.close;\n  toast.isActive = toastStore.isActive;\n  return toast;\n}\nexport { Toast, createRenderToast, createToastFn, toastStore };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}