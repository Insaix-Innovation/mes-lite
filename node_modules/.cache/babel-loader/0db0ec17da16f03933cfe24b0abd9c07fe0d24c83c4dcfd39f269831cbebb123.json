{"ast":null,"code":"import { manager, useModalManager } from \"./chunk-474T57YK.mjs\";\n\n// src/use-modal.ts\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [dialogId, headerId, bodyId] = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\");\n  useAriaHidden(dialogRef, isOpen && useInert);\n  useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = useRef(null);\n  const onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const getDialogProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      role: \"dialog\",\n      ...props2,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(props2.onClick, event => event.stopPropagation())\n    };\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!manager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    };\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  useEffect(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => \"\".concat(prefix, \"-\").concat(id));\n  }, [id, prefixes]);\n}\nexport { useModal, useAriaHidden };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}