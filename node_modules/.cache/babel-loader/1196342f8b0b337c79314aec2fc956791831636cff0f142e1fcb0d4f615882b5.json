{"ast":null,"code":"// src/index.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n  return clone;\n}\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\nfunction pick(object, keysToPick) {\n  const result = {};\n  for (const key of keysToPick) {\n    if (key in object) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key)) picked[key] = value;else omitted[key] = value;\n  }\n  return [picked, omitted];\n}\nfunction assignAfter(target) {\n  if (target == null) {\n    throw new TypeError(\"Cannot convert undefined or null to object\");\n  }\n  const result = {\n    ...target\n  };\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n  for (const nextSource of sources) {\n    if (nextSource == null) continue;\n    for (const nextKey in nextSource) {\n      if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey)) continue;\n      if (nextKey in result) delete result[nextKey];\n      result[nextKey] = nextSource[nextKey];\n    }\n  }\n  return result;\n}\nexport { assignAfter, compact, omit, pick, split };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}