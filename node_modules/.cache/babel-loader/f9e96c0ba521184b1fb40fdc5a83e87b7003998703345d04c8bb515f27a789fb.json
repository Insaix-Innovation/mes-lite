{"ast":null,"code":"import { scale } from \"./chunk-UNJFLZPD.mjs\";\nimport { useTooltip } from \"./chunk-GOQMVUD7.mjs\";\n\n// src/tooltip.tsx\nimport { popperCSSVars } from \"@chakra-ui/popper\";\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useTheme, getCSSVar } from \"@chakra-ui/system\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\nfunction pick(object, keysToPick) {\n  const result = {};\n  for (const key of keysToPick) {\n    if (key in object) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\n\n// src/tooltip.tsx\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Children, cloneElement } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar MotionDiv = chakra(motion.div);\nvar Tooltip = forwardRef((props, ref) => {\n  var _a, _b;\n  const styles = useStyleConfig(\"Tooltip\", props);\n  const ownProps = omitThemingProps(props);\n  const theme = useTheme();\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    portalProps,\n    background,\n    backgroundColor,\n    bgColor,\n    motionProps,\n    ...rest\n  } = ownProps;\n  const userDefinedBg = (_b = (_a = background != null ? background : backgroundColor) != null ? _a : bg) != null ? _b : bgColor;\n  if (userDefinedBg) {\n    styles.bg = userDefinedBg;\n    const bgVar = getCSSVar(theme, \"colors\", userDefinedBg);\n    styles[popperCSSVars.arrowBg.var] = bgVar;\n  }\n  const tooltip = useTooltip({\n    ...rest,\n    direction: theme.direction\n  });\n  const shouldWrap = typeof children === \"string\" || shouldWrapChildren;\n  let trigger;\n  if (shouldWrap) {\n    trigger = /* @__PURE__ */jsx(chakra.span, {\n      display: \"inline-block\",\n      tabIndex: 0,\n      ...tooltip.getTriggerProps(),\n      children\n    });\n  } else {\n    const child = Children.only(children);\n    trigger = cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));\n  }\n  const hasAriaLabel = !!ariaLabel;\n  const _tooltipProps = tooltip.getTooltipProps({}, ref);\n  const tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  const srOnlyProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  if (!label) {\n    return /* @__PURE__ */jsx(Fragment, {\n      children\n    });\n  }\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [trigger, /* @__PURE__ */jsx(AnimatePresence, {\n      children: tooltip.isOpen && /* @__PURE__ */jsx(Portal, {\n        ...portalProps,\n        children: /* @__PURE__ */jsx(chakra.div, {\n          ...tooltip.getTooltipPositionerProps(),\n          __css: {\n            zIndex: styles.zIndex,\n            pointerEvents: \"none\"\n          },\n          children: /* @__PURE__ */jsxs(MotionDiv, {\n            variants: scale,\n            initial: \"exit\",\n            animate: \"enter\",\n            exit: \"exit\",\n            ...motionProps,\n            ...tooltipProps,\n            __css: styles,\n            children: [label, hasAriaLabel && /* @__PURE__ */jsx(chakra.span, {\n              srOnly: true,\n              ...srOnlyProps,\n              children: ariaLabel\n            }), hasArrow && /* @__PURE__ */jsx(chakra.div, {\n              \"data-popper-arrow\": true,\n              className: \"chakra-tooltip__arrow-wrapper\",\n              children: /* @__PURE__ */jsx(chakra.div, {\n                \"data-popper-arrow-inner\": true,\n                className: \"chakra-tooltip__arrow\",\n                __css: {\n                  bg: styles.bg\n                }\n              })\n            })]\n          })\n        })\n      })\n    })]\n  });\n});\nTooltip.displayName = \"Tooltip\";\nexport { Tooltip };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}