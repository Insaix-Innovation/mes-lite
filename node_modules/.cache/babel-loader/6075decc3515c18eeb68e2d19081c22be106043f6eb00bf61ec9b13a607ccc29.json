{"ast":null,"code":"// src/components/badge.ts\nimport { cssVar, defineStyle, defineStyleConfig } from \"@chakra-ui/styled-system\";\nimport { transparentize } from \"@chakra-ui/theme-tools\";\nvar baseStyle = defineStyle({\n  px: 1,\n  textTransform: \"uppercase\",\n  fontSize: \"xs\",\n  borderRadius: \"sm\",\n  fontWeight: \"bold\"\n});\nvar $bg = cssVar(\"badge-bg\");\nvar $fg = cssVar(\"badge-color\");\nvar variantSolid = defineStyle(props => {\n  const {\n    colorScheme: c,\n    theme\n  } = props;\n  const dark = transparentize(\"\".concat(c, \".500\"), 0.6)(theme);\n  return {\n    [$bg.variable]: \"colors.\".concat(c, \".500\"),\n    [$fg.variable]: \"colors.white\",\n    _dark: {\n      [$bg.variable]: dark,\n      [$fg.variable]: \"colors.whiteAlpha.800\"\n    },\n    bg: $bg.reference,\n    color: $fg.reference\n  };\n});\nvar variantSubtle = defineStyle(props => {\n  const {\n    colorScheme: c,\n    theme\n  } = props;\n  const darkBg = transparentize(\"\".concat(c, \".200\"), 0.16)(theme);\n  return {\n    [$bg.variable]: \"colors.\".concat(c, \".100\"),\n    [$fg.variable]: \"colors.\".concat(c, \".800\"),\n    _dark: {\n      [$bg.variable]: darkBg,\n      [$fg.variable]: \"colors.\".concat(c, \".200\")\n    },\n    bg: $bg.reference,\n    color: $fg.reference\n  };\n});\nvar variantOutline = defineStyle(props => {\n  const {\n    colorScheme: c,\n    theme\n  } = props;\n  const darkColor = transparentize(\"\".concat(c, \".200\"), 0.8)(theme);\n  return {\n    [$fg.variable]: \"colors.\".concat(c, \".500\"),\n    _dark: {\n      [$fg.variable]: darkColor\n    },\n    color: $fg.reference,\n    boxShadow: \"inset 0 0 0px 1px \".concat($fg.reference)\n  };\n});\nvar variants = {\n  solid: variantSolid,\n  subtle: variantSubtle,\n  outline: variantOutline\n};\nvar badgeTheme = defineStyleConfig({\n  baseStyle,\n  variants,\n  defaultProps: {\n    variant: \"subtle\",\n    colorScheme: \"gray\"\n  }\n});\nexport { badgeTheme };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}