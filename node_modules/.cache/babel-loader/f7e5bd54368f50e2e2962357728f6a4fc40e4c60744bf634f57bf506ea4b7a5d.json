{"ast":null,"code":"import { isArray, isObject } from \"./chunk-Y5FGD7DM.mjs\";\n\n// src/flatten.ts\nfunction flatten(target) {\n  let maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  if (!isObject(target) && !Array.isArray(target) || !maxDepth) {\n    return target;\n  }\n  return Object.entries(target).reduce((result, _ref) => {\n    let [key, value] = _ref;\n    if (isObject(value) || isArray(value)) {\n      Object.entries(flatten(value, maxDepth - 1)).forEach(_ref2 => {\n        let [childKey, childValue] = _ref2;\n        result[\"\".concat(key, \".\").concat(childKey)] = childValue;\n      });\n    } else {\n      result[key] = value;\n    }\n    return result;\n  }, {});\n}\nexport { flatten };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}