{"ast":null,"code":"import { SelectField } from \"./chunk-HQIEHZYI.mjs\";\n\n// src/select.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, layoutPropNames, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key)) picked[key] = value;else omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\n// src/select.tsx\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Select = forwardRef((props, ref) => {\n  var _a;\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...((_a = styles.field) == null ? void 0 : _a[\"_focus\"])\n    }\n  };\n  return /* @__PURE__ */jsxs(chakra.div, {\n    className: \"chakra-select__wrapper\",\n    __css: rootStyles,\n    ...layoutProps,\n    ...rootProps,\n    children: [/* @__PURE__ */jsx(SelectField, {\n      ref,\n      height: h != null ? h : height,\n      minH: minH != null ? minH : minHeight,\n      placeholder,\n      ...ownProps,\n      __css: fieldStyles,\n      children: props.children\n    }), /* @__PURE__ */jsx(SelectIcon, {\n      \"data-disabled\": dataAttr(ownProps.disabled),\n      ...((iconColor || color) && {\n        color: iconColor || color\n      }),\n      __css: styles.icon,\n      ...(iconSize && {\n        fontSize: iconSize\n      }),\n      children: icon\n    })]\n  });\n});\nSelect.displayName = \"Select\";\nvar DefaultIcon = props => /* @__PURE__ */jsx(\"svg\", {\n  viewBox: \"0 0 24 24\",\n  ...props,\n  children: /* @__PURE__ */jsx(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  })\n});\nvar IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nvar SelectIcon = props => {\n  const {\n    children = /* @__PURE__ */jsx(DefaultIcon, {}),\n    ...rest\n  } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */jsx(IconWrapper, {\n    ...rest,\n    className: \"chakra-select__icon-wrapper\",\n    children: isValidElement(children) ? clone : null\n  });\n};\nSelectIcon.displayName = \"SelectIcon\";\nexport { Select, DefaultIcon };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}