{"ast":null,"code":"// src/use-editable.ts\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\nfunction useEditable() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    ...htmlProps\n  } = props;\n  const onEditProp = useCallbackRef(onEditCallback);\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  const [isEditing, setIsEditing] = useState(defaultIsEditing);\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const [prevValue, setPrevValue] = useState(value);\n  const inputRef = useRef(null);\n  const previewRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const cancelButtonRef = useRef(null);\n  const submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  const isInteractive = !isEditing && !isDisabled;\n  useSafeLayoutEffect(() => {\n    var _a, _b;\n    if (isEditing) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      if (selectAllOnFocus) (_b = inputRef.current) == null ? void 0 : _b.select();\n    }\n  }, []);\n  useUpdateEffect(() => {\n    var _a, _b, _c;\n    if (!isEditing) {\n      (_a = editButtonRef.current) == null ? void 0 : _a.focus();\n      return;\n    }\n    (_b = inputRef.current) == null ? void 0 : _b.focus();\n    if (selectAllOnFocus) {\n      (_c = inputRef.current) == null ? void 0 : _c.select();\n    }\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value);\n  }, [value]);\n  const onCancel = useCallback(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n  }, [onCancelProp, setValue, prevValue]);\n  const onSubmit = useCallback(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n  }, [value, onSubmitProp]);\n  useEffect(() => {\n    if (isEditing) return;\n    const inputEl = inputRef.current;\n    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {\n      inputEl == null ? void 0 : inputEl.blur();\n    }\n  }, [isEditing]);\n  const onChange = useCallback(event => {\n    setValue(event.currentTarget.value);\n  }, [setValue]);\n  const onKeyDown = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel,\n      Enter: event2 => {\n        if (!event2.shiftKey && !event2.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  const onKeyDownWithoutSubmit = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel\n    };\n    const action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel]);\n  const isValueEmpty = value.length === 0;\n  const onBlur = useCallback(event => {\n    var _a;\n    if (!isEditing) return;\n    const doc = event.currentTarget.ownerDocument;\n    const relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;\n    const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    const isValidBlur = !targetIsCancel && !targetIsSubmit;\n    if (isValidBlur) {\n      if (submitOnBlur) {\n        onSubmit();\n      } else {\n        onCancel();\n      }\n    }\n  }, [submitOnBlur, onSubmit, onCancel, isEditing]);\n  const getPreviewProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex,\n      onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);\n  const getTextareaProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);\n  const getEditButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      \"aria-label\": \"Edit\",\n      ...props2,\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled\n    };\n  }, [onEdit, isDisabled]);\n  const getSubmitButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onSubmit),\n      disabled: isDisabled\n    };\n  }, [onSubmit, isDisabled]);\n  const getCancelButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props2,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onCancel),\n      disabled: isDisabled\n    };\n  }, [onCancel, isDisabled]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}\nexport { useEditable };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}