{"ast":null,"code":"import { Box } from \"./chunk-6CSUKJP7.mjs\";\n\n// src/highlight.tsx\nimport { forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { Fragment, useMemo } from \"react\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\nvar escapeRegexp = term => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, char => \"\\\\\".concat(char));\nfunction buildRegex(query) {\n  const _query = query.filter(text => text.length !== 0).map(text => escapeRegexp(text.trim()));\n  if (!_query.length) {\n    return null;\n  }\n  return new RegExp(\"(\".concat(_query.join(\"|\"), \")\"), \"ig\");\n}\nfunction highlightWords(_ref) {\n  let {\n    text,\n    query\n  } = _ref;\n  const regex = buildRegex(Array.isArray(query) ? query : [query]);\n  if (!regex) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n  const result = text.split(regex).filter(Boolean);\n  return result.map(str => ({\n    text: str,\n    match: regex.test(str)\n  }));\n}\nfunction useHighlight(props) {\n  const {\n    text,\n    query\n  } = props;\n  return useMemo(() => highlightWords({\n    text,\n    query\n  }), [text, query]);\n}\nvar Mark = forwardRef(function Mark2(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props);\n  const ownProps = omitThemingProps(props);\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...ownProps,\n    as: \"mark\",\n    __css: {\n      bg: \"transparent\",\n      whiteSpace: \"nowrap\",\n      ...styles\n    }\n  });\n});\nfunction Highlight(props) {\n  const {\n    children,\n    query,\n    styles\n  } = props;\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\");\n  }\n  const chunks = useHighlight({\n    query,\n    text: children\n  });\n  return /* @__PURE__ */jsx(Fragment2, {\n    children: chunks.map((chunk, index) => {\n      return chunk.match ? /* @__PURE__ */jsx(Mark, {\n        sx: styles,\n        children: chunk.text\n      }, index) : /* @__PURE__ */jsx(Fragment, {\n        children: chunk.text\n      }, index);\n    })\n  });\n}\nexport { useHighlight, Mark, Highlight };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}