{"ast":null,"code":"// src/index.ts\nimport { useCallback, useEffect, useRef } from \"react\";\nfunction useCallbackRef(callback) {\n  let deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const callbackRef = useRef(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return useCallback(function () {\n    var _a;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);\n  }, deps);\n}\nexport { useCallbackRef };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}