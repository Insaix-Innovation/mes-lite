{"ast":null,"code":"// src/tag.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [TagStylesProvider, useTagStyles] = createContext({\n  name: \"TagStylesContext\",\n  errorMessage: \"useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Tag />\\\" \"\n});\nvar Tag = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props);\n  const ownProps = omitThemingProps(props);\n  const containerStyles = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container\n  };\n  return /* @__PURE__ */jsx(TagStylesProvider, {\n    value: styles,\n    children: /* @__PURE__ */jsx(chakra.span, {\n      ref,\n      ...ownProps,\n      __css: containerStyles\n    })\n  });\n});\nTag.displayName = \"Tag\";\nvar TagLabel = forwardRef((props, ref) => {\n  const styles = useTagStyles();\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    noOfLines: 1,\n    ...props,\n    __css: styles.label\n  });\n});\nTagLabel.displayName = \"TagLabel\";\nvar TagLeftIcon = forwardRef((props, ref) => /* @__PURE__ */jsx(Icon, {\n  ref,\n  verticalAlign: \"top\",\n  marginEnd: \"0.5rem\",\n  ...props\n}));\nTagLeftIcon.displayName = \"TagLeftIcon\";\nvar TagRightIcon = forwardRef((props, ref) => /* @__PURE__ */jsx(Icon, {\n  ref,\n  verticalAlign: \"top\",\n  marginStart: \"0.5rem\",\n  ...props\n}));\nTagRightIcon.displayName = \"TagRightIcon\";\nvar TagCloseIcon = props => /* @__PURE__ */jsx(Icon, {\n  verticalAlign: \"inherit\",\n  viewBox: \"0 0 512 512\",\n  ...props,\n  children: /* @__PURE__ */jsx(\"path\", {\n    fill: \"currentColor\",\n    d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n  })\n});\nTagCloseIcon.displayName = \"TagCloseIcon\";\nvar TagCloseButton = forwardRef((props, ref) => {\n  const {\n    isDisabled,\n    children,\n    ...rest\n  } = props;\n  const styles = useTagStyles();\n  const btnStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    outline: \"0\",\n    ...styles.closeButton\n  };\n  return /* @__PURE__ */jsx(chakra.button, {\n    ref,\n    \"aria-label\": \"close\",\n    ...rest,\n    type: \"button\",\n    disabled: isDisabled,\n    __css: btnStyles,\n    children: children || /* @__PURE__ */jsx(TagCloseIcon, {})\n  });\n});\nTagCloseButton.displayName = \"TagCloseButton\";\nexport { useTagStyles, Tag, TagLabel, TagLeftIcon, TagRightIcon, TagCloseButton };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}